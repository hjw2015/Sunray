<launch>

    <!--
    1. arg is just a variable in a xml/launch file that has no specific relation to ROS
    2. param in a launch file will load a single parameter to the parameter server
    3. rosparam in a launch file can load entire yaml files of parameters to the parameter server
	-->
		
	<arg name="rviz" default="false" />	
	<arg name="use_bag_file" default="false" />
	<arg name="bag_file" if="$(arg use_bag_file)" />
	<arg name="upside_down" default="false" />	
	<arg name="map_pcd" default="" />
	<arg name="start_sunray_node" default="true" />
	<arg name="sunray_ros_mode" default="LOCALIZATION" />

	<arg name="start_ground_lidar_processor" default="true" />
    <arg name="ground_lidar_angle_opening" default="180.0" />
    <arg name="ground_lidar_max_distance" default="1.0" />
    <arg name="ground_lidar_max_width" default="0.7" />
    <arg name="ground_lidar_max_height" default="0.7" />
    <arg name="ground_lidar_near_distance" default="0.2" />
    <arg name="ground_lidar_near_height" default="0.5" />
    <arg name="ground_lidar_min_obstacle_size" default="0.2" />


    <!-- use bag file (no LiDAR driver) -->
	<group if="$(arg use_bag_file)">   
		<param name="/use_sim_time" value="true" if="$(arg use_bag_file)" />
	  	<node pkg="rosbag" type="play" name="playback" args="-s 0 --clock $(arg bag_file)" >
	  </node>
	</group>


    <!-- use LiDAR driver -->
	<group unless="$(arg use_bag_file)">
		<include file="$(find livox_ros_driver2)/launch_ROS1/msg_MID360.launch" />
	</group>


	<!-- only test LiDAR driver -->
	<group if="$(eval sunray_ros_mode  == 'TEST_LIDAR')"> 
		<!--
		<node pkg="rviz" type="rviz" name="rviz" args="-d $(find ground_lidar_processor)/launch/test.rviz"  if="$(arg rviz)" />
		-->
		<node pkg="sunray_node" type="sunray_node" name="sunray_node" output="screen"   if="$(arg start_sunray_node)" />		
	</group>


	<!-- just Livox MID 360 driver & sunray node & ground lidar processor -->		
	<group if="$(eval sunray_ros_mode == 'SIMPLE')"> 	
		<include file="$(find pointcloud_gravity_align)/launch/run.launch" pass_all_args="true" >
			<arg name="align_gravity" value="false"/> 		
		</include>		
		<include file="$(find ground_lidar_processor)/launch/run.launch" pass_all_args="true"   if="$(arg start_ground_lidar_processor)" />
		<node pkg="sunray_node" type="sunray_node" name="sunray_node" output="screen"   if="$(arg start_sunray_node)" />		
		<node pkg="rviz" type="rviz" name="rviz" args="-d $(find ground_lidar_processor)/launch/test.rviz"  if="$(arg rviz)" />
	</group>


	<!-- ROS mapping & sunray node -->	
	<group if="$(eval sunray_ros_mode == 'MAPPING')"> 
		<include file="$(find pointcloud_gravity_align)/launch/run.launch" pass_all_args="true" >
			<arg name="align_gravity" value="true"/> 
		</include>
		<include file="$(find direct_lidar_inertial_odometry)/launch/dlio_mid360.launch"  pass_all_args="true" />
		<node pkg="sunray_node" type="sunray_node" name="sunray_node" output="screen"   if="$(arg start_sunray_node)">
		</node>
		<node pkg="rviz" type="rviz" name="rviz" args="-d $(find direct_lidar_inertial_odometry)/launch/dlio.rviz"  if="$(arg rviz)" />
	</group>


	<!-- ROS localization & sunray node & ground lidar processor -->		
	<group if="$(eval sunray_ros_mode == 'LOCALIZATION')"> 
		<include file="$(find ground_lidar_processor)/launch/run.launch" pass_all_args="true"   if="$(arg start_ground_lidar_processor)" />
		<include file="$(find pointcloud_gravity_align)/launch/run.launch" pass_all_args="true" >
			<arg name="align_gravity" value="false"/> 		
		</include>
		<include file="$(find direct_lidar_inertial_odometry)/launch/dlio_mid360.launch"   pass_all_args="true" />
		<include file="$(find mcl_3dl)/launch/mid360.launch"  pass_all_args="true" />

		<node pkg="sunray_node" type="sunray_node" name="sunray_node" output="screen"  if="$(arg start_sunray_node)" />

		<node pkg="rviz" type="rviz" name="rviz" args="-d $(find mcl_3dl)/config/mcl_3dl_demo.rviz"  if="$(arg rviz)" />				
	</group>


	<group if="$(eval sunray_ros_mode == 'LOCALIZATION' or sunray_ros_mode == 'MAPPING' )">
		<!-- static transform publisher: base_link to gps_link 
		http://wiki.ros.org/tf#static_transform_publisher   x=-0.25 y=0 z=-0.1 yaw=0 pitch=-0.2 roll=0 frame_id child_frame_id period_in_ms     -->
		<node pkg="tf" type="static_transform_publisher" name="base_to_gps_tf" args="-0.37 0 -0.1 0 -0.35 0 robot/base_link gps_link 10"/>
		<!-- static transform publisher: base_link to livox_frame  -->
  		<node pkg="tf" type="static_transform_publisher" name="base_to_livox_tf" args="0 0 0.0  0 0 0 robot/base_link livox_frame 10"/>
		
		<!-- 
		trajectory publisher  
		https://github.com/thien94/hector_trajectory_fixed_length -->
		<node pkg="hector_trajectory_server" type="hector_trajectory_server" name="hector_trajectory_server" output="screen">        
			<param name="target_frame_name" type="string" value="map" />
			<param name="source_frame_name" type="string" value="gps_link" />
			<param name="trajectory_update_rate" type="double" value="10" />
			<param name="trajectory_publish_rate" type="double" value="10" />
		</node>
	</group>


</launch>
