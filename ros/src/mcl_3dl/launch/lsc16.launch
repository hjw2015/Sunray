<?xml version="1.0"?>
<launch>
  <!-- 
    mcl_3dl params
  -->
  <arg name="without_odom" default="false" />
  <arg name="without_imu" default="true" />
  <arg name="use_neonavigation" default="false" />
  <arg name="use_pointcloud_map" default="true" />
  <arg name="use_cad_map" default="false" if="$(arg use_pointcloud_map)" />
  <arg name="use_cad_map" default="true" unless="$(arg use_pointcloud_map)" />
  <arg name="map_objs" unless="$(arg use_pointcloud_map)" />
  <arg name="map_pcd" if="$(arg use_pointcloud_map)" />
  <arg name="map_scale" default="1.0" />
  <arg name="map_offset_x" default="0.0" />
  <arg name="map_offset_y" default="0.0" />
  <arg name="generate_test_bag" default="false" />
  <arg name="use_bag_file" default="false" />
  <arg name="bag_file" if="$(arg use_bag_file)" />

  <!-- 
    ROS simulation time param
  -->
  <param name="/use_sim_time" value="true" if="$(arg use_bag_file)" />
    

  <!-- 
    ROS bag file playback
  -->
  <node pkg="rosbag" type="play" name="playback" args="-s 0 --clock $(arg bag_file)"
      if="$(arg use_bag_file)" >
    <remap from="odom" to="odom_unused" if="$(arg without_odom)" />
    <remap from="imu/data" to="imu/data_unused" if="$(arg without_imu)" />
  </node>


  <!-- 
    fast_lio lidar odometry package
  -->
	<!--  
  <rosparam command="load" file="$(find fast_lio)/config/mid360.yaml" />
	<param name="feature_extract_enable" type="bool" value="0"/>
	<param name="point_filter_num" type="int" value="1"/>
	<param name="max_iteration" type="int" value="3" />
	<param name="filter_size_surf" type="double" value="0.5" />
	<param name="filter_size_map" type="double" value="0.5" />
	<param name="cube_side_length" type="double" value="1000" />
	<param name="runtime_pos_log_enable" type="bool" value="0" />
  <param name="pcd_save/pcd_save_en" type="bool" value="false" />
  <node pkg="fast_lio" type="fastlio_mapping" name="laserMapping" output="screen" /> 
  -->

  <!-- 
    direct_lidar_odometry package
  -->
  <include file="$(find direct_lidar_odometry)/launch/dlo_lsc16.launch"  pass_all_args="true" />
  

  <arg name="config_file" default="$(find mcl_3dl)/config/test_lsc16.yaml" />

  <rosparam command="load" file="$(arg config_file)"/>

  <!--
  Required topics
    /imu/data (IMU data with estimated pose)
    /cloud    (Measured pointcloud)
    /odom     (Wheel odometry)
  -->

  <!-- 
  ROS visualization (rviz)
  -->
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find mcl_3dl)/config/mcl_3dl_demo.rviz" />
  
  
  <!-- 
    mcl_3dl package related stuff
  -->
  <node pkg="mcl_3dl" type="mcl_3dl" name="mcl_3dl" output="screen" unless="$(arg generate_test_bag)">
    <param name="compatible" value="1" />

    <!--
    <remap from="odom" to="fastlio_odom" />
    <remap from="imu/data" to="livox/imu" />
    <remap from="cloud" to="fastlio_pc" />  
    -->
    <remap from="odom" to="robot/dlo/odom_node/odom" />
    <remap from="cloud" to="velodyne_points" />  

  </node>
  <node pkg="obj_to_pointcloud" type="obj_to_pointcloud" name="obj_to_pointcloud"
      if="$(arg use_cad_map)">
    <param name="objs" value="$(arg map_objs)" />
    <param name="offset_x" value="$(arg map_offset_x)" />
    <param name="offset_y" value="$(arg map_offset_y)" />
    <param name="scale" value="$(arg map_scale)" />
    <remap from="~/cloud" to="mapcloud" />
  </node>
  <node pkg="pcl_ros" type="pcd_to_pointcloud" name="pcd_to_pointcloud"
      args="$(arg map_pcd)" if="$(arg use_pointcloud_map)">
    <remap from="cloud_pcd" to="mapcloud" />
  </node>

  <node pkg="trajectory_tracker" type="trajectory_recorder" name="path_recorder"
      if="$(arg use_neonavigation)">
    <param name="dist_interval" value="0.1" />
    <param name="ang_interval" value="0.2" />
  </node>
  <node pkg="trajectory_tracker" type="trajectory_recorder" name="poses_ref"
      if="$(arg use_neonavigation)">
    <param name="dist_interval" value="0.5" />
    <param name="ang_interval" value="100.0" />
  </node>



  <!-- 
  static transform publisher: base_link to gps_link 
  -->

  <!-- http://wiki.ros.org/tf#static_transform_publisher   x=-0.25 y=0 z=-0.1 yaw=0 pitch=-0.2 roll=0 frame_id child_frame_id period_in_ms   -->
  <node pkg="tf" type="static_transform_publisher" name="base_to_gps_tf" args="-0.35 0 -0.4 0 0.0 0 robot/base_link gps_link 10"/>


  <!-- 
  trajectory publisher  
  -->

  <!-- https://github.com/thien94/hector_trajectory_fixed_length -->
  <node pkg="hector_trajectory_server" type="hector_trajectory_server" name="hector_trajectory_server" output="screen">        
    <param name="target_frame_name" type="string" value="map" />
    <param name="source_frame_name" type="string" value="gps_link" />
    <param name="trajectory_update_rate" type="double" value="10" />
    <param name="trajectory_publish_rate" type="double" value="10" />
  </node>



</launch>
